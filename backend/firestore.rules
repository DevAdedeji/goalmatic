rules_version = '2';

service cloud.firestore {
  function isSignedIn() {
    return request.auth != null;
  }
  
  function isOwner(userId) {
    return request.auth.uid == userId;
  }
  
  // Validates that a timestamp exists and is not in the future.
  function validTimestamp(field) {
    return field is timestamp && field <= request.time;
  }

  match /databases/{database}/documents {
    
    // Users collection: holds user profiles.
    match /users/{userId} {
      allow create: if isSignedIn() &&
        isOwner(userId) &&
        request.resource.data.keys().hasAll(['email', 'created_at']) &&
        validTimestamp(request.resource.data.created_at);
      
      allow read: if isSignedIn() && isOwner(userId);
      
      allow update: if isSignedIn() &&
        isOwner(userId) &&
        request.resource.data.email == resource.data.email &&
        validTimestamp(request.resource.data.updated_at);
      
      allow delete: if false;

      // Todos collection: each todo is tied to an owner.
      match /todos/{todoId} {
        // On create, ensure the document includes an user_id matching the auth.uid and required fields.
        allow create: if isSignedIn() &&
          isOwner(userId) &&
          request.resource.data.keys().hasAll(['title', 'user_id', 'created_at']) &&
          validTimestamp(request.resource.data.created_at);
        
        // Read, update, and delete allowed only for the document owner.
        allow read, update, delete: if isSignedIn() &&
          isOwner(userId) &&
          (request.method != "update" ||
            (request.resource.data.user_id == resource.data.user_id &&
             validTimestamp(request.resource.data.updated_at)));
      }

        // Integrations collection: settings for third-party integrations.
      match /integrations/{integrationId} {
        allow create: if isSignedIn() &&
          isOwner(userId) &&
          request.resource.data.keys().hasAll(['user_id', 'id', 'created_at']) &&
          validTimestamp(request.resource.data.created_at);
        
        allow read, update, delete: if isSignedIn() &&
          isOwner(userId) &&
          (request.method != "update" ||
            (request.resource.data.user_id == resource.data.user_id &&
             validTimestamp(request.resource.data.updated_at)));
    }
    }
    
    // Goals collection: user-defined goals.
    match /goals/{goalId} {
      allow create: if isSignedIn() && isOwner(request.resource.data.user_id) &&
        request.resource.data.keys().hasAll(['title', 'desc', 'steps', 'user_id', 'created_at']) &&
        validTimestamp(request.resource.data.created_at);
      
      allow read, update, delete: if isSignedIn() &&
        resource.data.user_id == request.auth.uid &&
        (request.method != "update" ||
          (request.resource.data.user_id == resource.data.user_id &&
           validTimestamp(request.resource.data.updated_at)));
    }
    
    // Agents collection: AI agents that can be personal or public
    match /agents/{agentId} {
      allow create: if isSignedIn() && 
        isOwner(request.resource.data.user_id) &&
        request.resource.data.keys().hasAll(['name', 'user_id', 'created_at', 'description', 'public']) &&
        validTimestamp(request.resource.data.created_at);
      
      // Allow reading public agents to any signed-in user
      allow read: if isSignedIn() && 
        (resource.data.public == true || resource.data.user_id == request.auth.uid);
      
      // Allow update and delete only to the owner
      allow update, delete: if isSignedIn() && 
        resource.data.user_id == request.auth.uid &&
        (request.method != "update" ||
          (request.resource.data.user_id == resource.data.user_id &&
           validTimestamp(request.resource.data.updated_at)));
    }
    
    // Flows collection: user-defined automation flows that can be private or public
    match /flows/{flowId} {
      allow create: if isSignedIn() && 
        request.resource.data.creator_id == request.auth.uid &&
        request.resource.data.name is string &&
        request.resource.data.creator_id is string && 
        request.resource.data.created_at is timestamp &&
         request.resource.data.status is number &&
        request.resource.data.steps is list &&
        validTimestamp(request.resource.data.created_at);
      
      allow read: if isSignedIn() && (
        (!("creator_id" in resource.data) || resource.data.creator_id == request.auth.uid) ||
        (!("visibility" in resource.data) || resource.data.visibility == "public") ||
        (resource.data.visibility == "private" && 
         resource.data.allowed_users != null && 
         request.auth.uid in resource.data.allowed_users)
      );
      
      allow update, delete: if isSignedIn() &&
        (!("creator_id" in resource.data) || resource.data.creator_id == request.auth.uid) &&
        (request.method != "update" ||
          ((!("creator_id" in request.resource.data) && !("creator_id" in resource.data)) || 
           request.resource.data.creator_id == resource.data.creator_id) &&
          (!("updated_at" in request.resource.data) || validTimestamp(request.resource.data.updated_at)));
    }
  
    // Tables collection: user-defined database tables with fields and records
    match /tables/{tableId} {
      allow create: if isSignedIn() && 
        request.resource.data.creator_id == request.auth.uid &&
        request.resource.data.name is string &&
        request.resource.data.creator_id is string && 
        request.resource.data.created_at is timestamp &&
        request.resource.data.fields is list &&
        validTimestamp(request.resource.data.created_at);
      
      allow read: if isSignedIn() && (
        (!("creator_id" in resource.data) || resource.data.creator_id == request.auth.uid) ||
        (!("visibility" in resource.data) || resource.data.visibility == "public") ||
        (resource.data.visibility == "private" && 
         resource.data.allowed_users != null && 
         request.auth.uid in resource.data.allowed_users)
      );
      
      allow update, delete: if isSignedIn() &&
        (!("creator_id" in resource.data) || resource.data.creator_id == request.auth.uid) &&
        (request.method != "update" ||
          ((!("creator_id" in request.resource.data) && !("creator_id" in resource.data)) || 
           request.resource.data.creator_id == resource.data.creator_id) &&
          (!("updated_at" in request.resource.data) || validTimestamp(request.resource.data.updated_at)));
    }
    
    // Deny access to any other documents not explicitly covered above.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
